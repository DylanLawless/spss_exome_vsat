library(dplyr)
library(ggplot2)
library(plotly)
getwd()
# ACMGuru ----
library(data.table)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(scico) # devtools::install_github("thomasp85/scico") # scico_palette_show()
library(grid)
library(forcats) # new facet labels
library(ggrepel)
library(ggpubr) # For ggarrange
library(cowplot) # For get_legend
library(patchwork) # plots in panels
library(knitr)
file_suffix <- "ACMGuru_singlecase_"
output_directory <- "ACMGuru_singlecase/"
# acmg ----
# For reference
df_acmg <- fread("../../ref/acmg_criteria_table.txt", sep = "\t", header = TRUE, fill=TRUE)
df_acmg_caveat <- fread("../../ref/acmg_criteria_table_caveats.txt", sep = "\t", header = TRUE)
iuis <- read.table(
file = "../../ref/10875_2022_1289_MOESM2_ESM_DLcleaned.tsv",
sep = "\t",
fill = TRUE,  # To handle rows with fewer columns
header = TRUE # Change this based on whether the first line is a header
)
colnames(iuis)[colnames(iuis) == 'Gene.symbol'] <- 'SYMBOL'
# varsome ----
# LE = less than equal to, GE = greater than equal to
varsome <- read.table(file = "../../ref/varsome_calibrated_insilico_thresholds.tsv", sep="\t", header = TRUE)
# qv ----
# Define the chromosome identifiers
chromosomes <- c(1:22, "X", "Y")
chromosomes <- c(1:22, "X")
# Generate file names using paste0 and the chromosome identifiers
file_list <- paste0(
"../../data/", output_directory, "bcftools_gatk_norm_maf01.recode_vep_conda_impact_iuis_gnomad_af1_chr_",
chromosomes,
".vcf.gz"
)
df_pathway_list <- list()
# for (f in 21) {
for (f in 1:length(file_list)) {
cat("Now analysing", f, "\n")
source("../stand_alone_vcf_to_table/stand_alone_vcf_to_table.R")
# qv clean ----
df$cohort_pheno <- df$sample
# "setpt" = controls "0" / not "setpt" = cases "1"
df$cohort_pheno[grep("^setpt", df$sample)] <- "0"
df$cohort_pheno[!grepl("^setpt", df$sample)] <- "1"
# frequency for cases and controls
df_genotype_frequency <- df %>%
dplyr::select(sample, rownames, genotype) %>%
unique() %>% # this is import to count genomic positions once rather than transcripts
mutate(cohort_pheno = ifelse(grepl("^setpt", sample), "0", "1")) %>%
group_by(rownames, cohort_pheno) %>%
summarize(genotype_total_frequency = sum(genotype)/n(), .groups = "drop") %>%
pivot_wider(names_from = cohort_pheno, values_from = genotype_total_frequency, names_prefix = "frequency_in_")  %>%
mutate(is_frequency_in_0_less = ifelse(frequency_in_0 < frequency_in_1, "Yes", "No"))
df <- df |> filter(genotype > 0) # Keep only variants
df <- merge(df, df_genotype_frequency, all.x=TRUE)
rm(df_genotype_frequency)
df <- df |> filter(IMPACT %in% c("HIGH", "MODERATE"))
df <- df |> dplyr::select(-"ClinVar.x",
- "ClinVar_CLNSIG.x",
- "ClinVar_CLNREVSTAT.x",
- "ClinVar_CLNDN.x") # annotation duplicates
df <- df |> distinct()
df <- df |> filter(cohort_pheno == 1)
df <- df |> filter(AC < 10)
df_pathway_list[[f]] <- df
}
