# Print the results
print(column_existence)
# Function to check the class of each column
check_column_classes <- function(dist_variables, columns_list) {
lapply(columns_list, function(columns) {
sapply(columns, function(column) {
if(column %in% names(dist_variables)) {
class(dist_variables[[column]])
} else {
NA  # Return NA if column does not exist
}
})
})
}
# Apply the function to get column classes
column_classes <- check_column_classes(dist_variables, columns_criteria)
print(column_classes)
# Load necessary library for plotting
library(ggplot2)
# Histogram for 'genotype' (used in both PVS1 and PS3)
if ("genotype" %in% names(dist_variables)) {
p1<-  ggplot(dist_variables, aes(x = genotype)) +
geom_histogram(binwidth = 1, fill = "#fbd693", color = "black") +
ggtitle("Genotype") +
xlab("Genotype") +
ylab("Frequency") +
theme_bw()
}
# Histogram for 'gnomAD_AF' (used in PM2)
if ("gnomAD_AF" %in% names(dist_variables)) {
p2<-   ggplot(dist_variables, aes(x = gnomAD_AF)) +
geom_histogram(fill = "#fbc393", color = "black", bins = 30) +
ggtitle("gnomAD_AF") +
xlab("gnomAD_AF") +
ylab("Frequency") +
theme_bw()
}
# Bar plot for 'IMPACT' (used in PVS1 and PS5)
if ("IMPACT" %in% names(dist_variables)) {
p3<-   ggplot(dist_variables, aes(x = IMPACT)) +
geom_bar(fill = "#fbad85", color = "black") +
ggtitle("IMPACT") +
xlab("IMPACT") +
ylab("Count") +
theme_bw()
}
# Bar plot for 'Inheritance' (used in PVS1 and PS3)
if ("Inheritance" %in% names(dist_variables)) {
p4<-   ggplot(dist_variables, aes(x = Inheritance)) +
geom_bar(fill = "#ff9981", color = "black") +
ggtitle("Inheritance") +
xlab("Inheritance") +
ylab("Count") +
theme_bw()
}
# Bar plot for 'CLIN_SIG' (used in PS1)
if ("CLIN_SIG" %in% names(dist_variables)) {
dist_variables$CLIN_SIG_trimmed <- substr(dist_variables$CLIN_SIG, 1, 20)
p5<- ggplot(dist_variables, aes(x = CLIN_SIG_trimmed)) +
geom_bar(fill = "#e08778", color = "black") +
ggtitle("CLIN_SIG") +
xlab("CLIN_SIG") +
ylab("Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
}
if ("ClinVar_CLNDN.y" %in% names(dist_variables)) {
dist_variables$ClinVar_CLNDN_trimmed <- substr(dist_variables$ClinVar_CLNDN.y, 1, 20)
labels <- unique(dist_variables$ClinVar_CLNDN_trimmed)
labels <- sort(labels)
# Calculate indices to select labels evenly spaced
if (length(labels) > 10) {
indices <- round(seq(1, length(labels), length.out = 10))
selected_labels <- labels[indices]
} else {
selected_labels <- labels
}
p6 <- ggplot(dist_variables, aes(x = ClinVar_CLNDN_trimmed)) +
geom_bar(fill = "#b86572", color = "black") +
ggtitle("ClinVar_CLNDN (n=10 samp)") +
xlab("ClinVar_CLNDN") +
ylab("Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_x_discrete(breaks = selected_labels, labels = selected_labels)  # Use the selected labels
}
# Check if 'SYMBOL' is present in the dataframe
if ("SYMBOL" %in% names(dist_variables)) {
# Get unique labels and sort them alphabetically
symbols <- unique(dist_variables$SYMBOL)
symbols <- sort(symbols)
# Calculate indices to select labels evenly spaced
if (length(symbols) > 10) {
# Generate indices for evenly spaced labels
indices <- round(seq(1, length(symbols), length.out = 10))
selected_symbols <- symbols[indices]
} else {
selected_symbols <- symbols
}
# Create the plot using the selected labels
p7 <- ggplot(dist_variables, aes(x = SYMBOL)) +
geom_bar(fill = "#575960", color = "black") +
ggtitle("SYMBOL (n=10 samp)") +
xlab("SYMBOL") +
ylab("Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_x_discrete(breaks = selected_symbols, labels = selected_symbols)  # Use the selected labels
# Print the plot
print(p7)
}
library(patchwork)
dist_patch <- (p1 + p2 + p3 + p4) / (p5 + p6 + p7)
dist_patch
output_directory
file_suffix
ggsave(paste("../../images/", output_directory, file_suffix, "distribution_variables.pdf", sep = "") ,plot = dist_patch )
ggsave(paste("../../images/", output_directory, file_suffix, "distribution_variables.pdf", sep = "") ,plot = dist_patch, width = 6, height = 6)
ggsave(paste("../../images/", output_directory, file_suffix, "distribution_variables.pdf", sep = "") ,plot = dist_patch, width = 6, height = 10)
ggsave(paste("../../images/", output_directory, file_suffix, "distribution_variables.pdf", sep = "") ,plot = dist_patch, width = 10, height = 10)
rm(dist_patch, dist_variables)
# ACMGuru ----
library(data.table)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(scico) # devtools::install_github("thomasp85/scico") # scico_palette_show()
library(grid)
library(forcats) # new facet labels
library(ggrepel)
library(ggpubr) # For ggarrange
library(cowplot) # For get_legend
library(patchwork) # plots in panels
library(knitr)
file_suffix <- "ACMGuru_singlecase_"
output_directory <- "ACMGuru_singlecase/"
# setting population filter threshold ----
# The same style is applied in stand_alone_vcf_to_table but the threshold is there set to 1 for generality and could instead be passed from this runner script. You can see from the following tests what effect this step has. This is a sanity test to see if our scores are as expected or if gnomad freq is basically the same proxy, which it is not at the final candidate stage.
gnomad_freq_thresh_local <- ""
# no threshold = 66 candidate variants
# gnomad_rare_thresh <- 1400 # 46 OK
# gnomad_rare_thresh <- 140 # 19 candidate variants ?
# gnomad_rare_thresh <- 1.4 # 43 candidate variants OK
# gnomad_total <- 140000 # approx number in gnomad
# gnomad_rare_thresh <- 140 # approx carriers
# gnomad_freq_thresh_local <- gnomad_rare_thresh/gnomad_total
# gnomad_freq_thresh_local
# acmg ----
# For reference
df_acmg <- fread("../../ref/acmg_criteria_table.txt", sep = "\t", header = TRUE, fill=TRUE)
df_acmg_caveat <- fread("../../ref/acmg_criteria_table_caveats.txt", sep = "\t", header = TRUE)
# iuis ----
iuis <- read.table(
file = "../../ref/10875_2022_1289_MOESM2_ESM_DLcleaned.tsv",
sep = "\t",
fill = TRUE,  # To handle rows with fewer columns
header = TRUE # Change this based on whether the first line is a header
)
colnames(iuis)[colnames(iuis) == 'Gene.symbol'] <- 'SYMBOL'
# varsome ----
# LE = less than equal to, GE = greater than equal to
varsome <- read.table(file = "../../ref/varsome_calibrated_insilico_thresholds.tsv", sep="\t", header = TRUE)
# qv ----
# Define the chromosome identifiers
chromosomes <- c(1:22, "X")
chromosomes <- c(21:22, "X") # TEMP TEST
# chromosomes <- c(21:22, "X")
# Generate file names using paste0 and the chromosome identifiers
file_list <- paste0(
"../../data/", output_directory, "bcftools_gatk_norm_maf01.recode_vep_conda_impact_iuis_gnomad_af1_chr_",
chromosomes,
".vcf.gz"
)
df_pathway_list <- list()
# for (f in 21) {
for (f in 1:length(file_list)) {
cat("Now analysing", f, "\n")
source("../stand_alone_vcf_to_table/stand_alone_vcf_to_table.R")
# qv clean ----
df$cohort_pheno <- df$sample
# "setpt" = controls "0" / not "setpt" = cases "1"
df$cohort_pheno[grep("^setpt", df$sample)] <- "0"
df$cohort_pheno[!grepl("^setpt", df$sample)] <- "1"
# frequency for cases and controls
df_genotype_frequency <- df %>%
dplyr::select(sample, rownames, genotype) %>%
unique() %>% # this is import to count genomic positions once rather than transcripts
mutate(cohort_pheno = ifelse(grepl("^setpt", sample), "0", "1")) %>%
group_by(rownames, cohort_pheno) %>%
dplyr::summarize(genotype_total_frequency = sum(genotype)/n(), .groups = "drop") %>%
pivot_wider(names_from = cohort_pheno, values_from = genotype_total_frequency, names_prefix = "frequency_in_")  %>%
mutate(is_frequency_in_0_less = ifelse(frequency_in_0 < frequency_in_1, "Yes", "No"))
df <- df |> filter(genotype > 0) # Keep only variants
df <- merge(df, df_genotype_frequency, all.x=TRUE)
rm(df_genotype_frequency)
df <- df |> filter(IMPACT %in% c("HIGH", "MODERATE"))
df <- df |> dplyr::select(-"ClinVar.x",
- "ClinVar_CLNSIG.x",
- "ClinVar_CLNREVSTAT.x",
- "ClinVar_CLNDN.x") # annotation duplicates
df <- df |> distinct()
df <- df |> filter(cohort_pheno == 1)
df <- df |> filter(AC < 10)
df_pathway_list[[f]] <- df
}
cat("\nFinished vcf_to_table")
# dfx <- df_pathway_list[[23]] # check chr X
df_pathway <- do.call(rbind, df_pathway_list)
df <- df_pathway
df <- df |> filter(!is.na(SYMBOL)) # clean out unassigned
hold <- df
df <- hold
# filter gnomad
# print(paste("Filtering with gnomad_freq_thresh_local", gnomad_freq_thresh_local))
# df <- df |> filter(gnomAD_AF < gnomad_freq_thresh_local)
# print("!!! PS1 test !!\n\n")
# print(hold$CLIN_SIG |> unique())
# print(hold$ClinVar_CLNDN.y |> unique())
# print(hold |> dplyr::select(CLIN_SIG, ClinVar_CLNDN.y) |> unique())
# hold_x <- hold |> dplyr::select(CLIN_SIG, ClinVar_CLNDN.y) |> unique()
# hold_x <- hold |> filter(genotype == 2)
# TEST BREAK
# hold <- hold |> filter(CHROM == "chrX")
# hold$CHROM |> unique()
# saveRDS(df, "./df.Rds")
# df <- readRDS("./df.Rds")
# tidy rm trash
rm(list=setdiff(ls(), c("gnomad_freq_thresh_local", "df",  "df_acmg", "df_acmg_caveat", "hold", "iuis", "varsome", "output_directory", "file_suffix")))
gc()
# iuis merge ----
df <- merge(df, iuis, by="SYMBOL", all.x=TRUE) |> dplyr::select(SYMBOL, Inheritance, everything())
# summary ----
# library(Hmisc)
df$gnomAD_AF <- as.numeric(df$gnomAD_AF)
df$AC <- as.numeric(df$AC)
df$AF.x <- as.numeric(df$AF.x)
temp <- df |> ungroup() |> dplyr::select(genotype, Inheritance, IMPACT, Consequence, AF.x, AC, gnomAD_AF, HGVSc) |> unique()
temp |>
group_by(genotype) |>
summarise(n())
temp |>
group_by(Inheritance) |>
summarise(n())
temp |>
group_by(IMPACT) |>
summarise(n())
temp |>
group_by(Consequence) |>
summarise(n())
temp |>
group_by(AF.x) |>
summarise(n())
temp |>
group_by(AC) |>
summarise(n())
temp |>
ungroup() |>
dplyr::select(HGVSc) |>
unique() |>
summarise(n())
# Test for the Borghesi_paper variants present -----
# Filter for any of the known variants:
# WAS p.Glu131Lys, CYBB p.Gly364Arg, CFH p.Pro503Ala
Borghesi_test <- df |>
filter(
(SYMBOL == "WAS" & HGVSp == "ENSP00000365891.4:p.Glu131Lys") |
(SYMBOL == "CYBB" & HGVSp == "ENSP00000367851.4:p.Gly364Arg") |
(SYMBOL == "CFH")
) |>
dplyr::select(sample,
SYMBOL,
rownames,
chr,
HGVSp,
HGVSc,
Consequence,
"IMPACT",
"genotype",
"Inheritance",
"CLIN_SIG",
"gnomAD_AF",
) |>
arrange(SYMBOL,
sample)
Borghesi_test |> dplyr::select(SYMBOL, sample, genotype, gnomAD_AF) |> unique()
# There were three "known pathogenic" variants reported; WAS p.Glu131Lys, CYBB p.Gly364Arg, CFH p.Pro503Ala. CFH was filtered out during normal QC stages. The CYBB variant is present for 5 samples and 1 has genotype 2 (hemizygous male on X chromosome), however it is flagged as benign on CliVar and removed by MAF (0.003943) using newer gnomAD database. The WAS variant is present for 4 samples and 1 has genotype 2 (hemizygous male on X chromosome) however it is not identified as pathogenic by ACMG criteria (and nCliVar likely_benign) and and removed by MAF (0.002591) using newer gnomAD database. All other variants are basically do not have sufficient evidence of pathogenicity with updated criteria.
rm(Borghesi_test)
# df_desc <- describe(temp)
# df_desc
# latex(df_desc, file = "./df_desc.tex")
# rm(temp)
# fix missing chromosome info ----
# chr comes from dbnsfp (I believe), but is a sensible header name so we will reuse it
# Remove "chr" prefix from seqname and create a new 'chr' column
df <- df %>%
mutate(chr = sub("chr", "", seqnames))
# comp_het_flag ----
# flag for comp het. WARNING NOT PHASE CHECKED
df <- df %>%
group_by(sample, SYMBOL) %>%
mutate(comp_het_flag = ifelse(n() > 1, 1, NA))
# same flag for genotype == 2 (homozygous)
df <- df %>%
mutate(comp_het_flag = ifelse(is.na(comp_het_flag) & genotype == 2, 1, comp_het_flag)) %>%
ungroup() %>%
dplyr::select(comp_het_flag, everything())
# Update the flag for chromosome X observations to include a check for genotype == 2
# NB:: this must be screened using sex info
df <- df %>%
mutate(comp_het_flag = ifelse(chr == "X" & genotype == 2, 1, comp_het_flag)) %>%
dplyr::select(comp_het_flag, everything())
# print(n = 30, df |> filter(SYMBOL == "WAS") |> dplyr::select(IMPACT, SYMBOL, genotype))
# source acmg filters ----
print("We are adding PS3 now")
source("ACMG_filters/distribution_variables.R")
# ACMGuru ----
library(data.table)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(scico) # devtools::install_github("thomasp85/scico") # scico_palette_show()
library(grid)
library(forcats) # new facet labels
library(ggrepel)
library(ggpubr) # For ggarrange
library(cowplot) # For get_legend
library(patchwork) # plots in panels
library(knitr)
file_suffix <- "ACMGuru_singlecase_"
output_directory <- "ACMGuru_singlecase/"
# setting population filter threshold ----
# The same style is applied in stand_alone_vcf_to_table but the threshold is there set to 1 for generality and could instead be passed from this runner script. You can see from the following tests what effect this step has. This is a sanity test to see if our scores are as expected or if gnomad freq is basically the same proxy, which it is not at the final candidate stage.
gnomad_freq_thresh_local <- ""
# no threshold = 66 candidate variants
# gnomad_rare_thresh <- 1400 # 46 OK
# gnomad_rare_thresh <- 140 # 19 candidate variants ?
# gnomad_rare_thresh <- 1.4 # 43 candidate variants OK
# gnomad_total <- 140000 # approx number in gnomad
# gnomad_rare_thresh <- 140 # approx carriers
# gnomad_freq_thresh_local <- gnomad_rare_thresh/gnomad_total
# gnomad_freq_thresh_local
# acmg ----
# For reference
df_acmg <- fread("../../ref/acmg_criteria_table.txt", sep = "\t", header = TRUE, fill=TRUE)
df_acmg_caveat <- fread("../../ref/acmg_criteria_table_caveats.txt", sep = "\t", header = TRUE)
# iuis ----
iuis <- read.table(
file = "../../ref/10875_2022_1289_MOESM2_ESM_DLcleaned.tsv",
sep = "\t",
fill = TRUE,  # To handle rows with fewer columns
header = TRUE # Change this based on whether the first line is a header
)
colnames(iuis)[colnames(iuis) == 'Gene.symbol'] <- 'SYMBOL'
# varsome ----
# LE = less than equal to, GE = greater than equal to
varsome <- read.table(file = "../../ref/varsome_calibrated_insilico_thresholds.tsv", sep="\t", header = TRUE)
# qv ----
# Define the chromosome identifiers
chromosomes <- c(1:22, "X")
# chromosomes <- c(21:22, "X") # TEMP TEST
# chromosomes <- c(21:22, "X")
# Generate file names using paste0 and the chromosome identifiers
file_list <- paste0(
"../../data/", output_directory, "bcftools_gatk_norm_maf01.recode_vep_conda_impact_iuis_gnomad_af1_chr_",
chromosomes,
".vcf.gz"
)
df_pathway_list <- list()
# for (f in 21) {
for (f in 1:length(file_list)) {
cat("Now analysing", f, "\n")
source("../stand_alone_vcf_to_table/stand_alone_vcf_to_table.R")
# qv clean ----
df$cohort_pheno <- df$sample
# "setpt" = controls "0" / not "setpt" = cases "1"
df$cohort_pheno[grep("^setpt", df$sample)] <- "0"
df$cohort_pheno[!grepl("^setpt", df$sample)] <- "1"
# frequency for cases and controls
df_genotype_frequency <- df %>%
dplyr::select(sample, rownames, genotype) %>%
unique() %>% # this is import to count genomic positions once rather than transcripts
mutate(cohort_pheno = ifelse(grepl("^setpt", sample), "0", "1")) %>%
group_by(rownames, cohort_pheno) %>%
dplyr::summarize(genotype_total_frequency = sum(genotype)/n(), .groups = "drop") %>%
pivot_wider(names_from = cohort_pheno, values_from = genotype_total_frequency, names_prefix = "frequency_in_")  %>%
mutate(is_frequency_in_0_less = ifelse(frequency_in_0 < frequency_in_1, "Yes", "No"))
df <- df |> filter(genotype > 0) # Keep only variants
df <- merge(df, df_genotype_frequency, all.x=TRUE)
rm(df_genotype_frequency)
df <- df |> filter(IMPACT %in% c("HIGH", "MODERATE"))
df <- df |> dplyr::select(-"ClinVar.x",
- "ClinVar_CLNSIG.x",
- "ClinVar_CLNREVSTAT.x",
- "ClinVar_CLNDN.x") # annotation duplicates
df <- df |> distinct()
df <- df |> filter(cohort_pheno == 1)
df <- df |> filter(AC < 10)
df_pathway_list[[f]] <- df
}
cat("\nFinished vcf_to_table")
# dfx <- df_pathway_list[[23]] # check chr X
df_pathway <- do.call(rbind, df_pathway_list)
df <- df_pathway
df <- df |> filter(!is.na(SYMBOL)) # clean out unassigned
hold <- df
df <- hold
# filter gnomad
# print(paste("Filtering with gnomad_freq_thresh_local", gnomad_freq_thresh_local))
# df <- df |> filter(gnomAD_AF < gnomad_freq_thresh_local)
# print("!!! PS1 test !!\n\n")
# print(hold$CLIN_SIG |> unique())
# print(hold$ClinVar_CLNDN.y |> unique())
# print(hold |> dplyr::select(CLIN_SIG, ClinVar_CLNDN.y) |> unique())
# hold_x <- hold |> dplyr::select(CLIN_SIG, ClinVar_CLNDN.y) |> unique()
# hold_x <- hold |> filter(genotype == 2)
# TEST BREAK
# hold <- hold |> filter(CHROM == "chrX")
# hold$CHROM |> unique()
# saveRDS(df, "./df.Rds")
# df <- readRDS("./df.Rds")
# tidy rm trash
rm(list=setdiff(ls(), c("gnomad_freq_thresh_local", "df",  "df_acmg", "df_acmg_caveat", "hold", "iuis", "varsome", "output_directory", "file_suffix")))
gc()
# iuis merge ----
df <- merge(df, iuis, by="SYMBOL", all.x=TRUE) |> dplyr::select(SYMBOL, Inheritance, everything())
# summary ----
# library(Hmisc)
df$gnomAD_AF <- as.numeric(df$gnomAD_AF)
df$AC <- as.numeric(df$AC)
df$AF.x <- as.numeric(df$AF.x)
temp <- df |> ungroup() |> dplyr::select(genotype, Inheritance, IMPACT, Consequence, AF.x, AC, gnomAD_AF, HGVSc) |> unique()
temp |>
group_by(genotype) |>
summarise(n())
temp |>
group_by(Inheritance) |>
summarise(n())
temp |>
group_by(IMPACT) |>
summarise(n())
temp |>
group_by(Consequence) |>
summarise(n())
temp |>
group_by(AF.x) |>
summarise(n())
temp |>
group_by(AC) |>
summarise(n())
temp |>
ungroup() |>
dplyr::select(HGVSc) |>
unique() |>
summarise(n())
# Test for the Borghesi_paper variants present -----
# Filter for any of the known variants:
# WAS p.Glu131Lys, CYBB p.Gly364Arg, CFH p.Pro503Ala
Borghesi_test <- df |>
filter(
(SYMBOL == "WAS" & HGVSp == "ENSP00000365891.4:p.Glu131Lys") |
(SYMBOL == "CYBB" & HGVSp == "ENSP00000367851.4:p.Gly364Arg") |
(SYMBOL == "CFH")
) |>
dplyr::select(sample,
SYMBOL,
rownames,
chr,
HGVSp,
HGVSc,
Consequence,
"IMPACT",
"genotype",
"Inheritance",
"CLIN_SIG",
"gnomAD_AF",
) |>
arrange(SYMBOL,
sample)
Borghesi_test |> dplyr::select(SYMBOL, sample, genotype, gnomAD_AF) |> unique()
# There were three "known pathogenic" variants reported; WAS p.Glu131Lys, CYBB p.Gly364Arg, CFH p.Pro503Ala. CFH was filtered out during normal QC stages. The CYBB variant is present for 5 samples and 1 has genotype 2 (hemizygous male on X chromosome), however it is flagged as benign on CliVar and removed by MAF (0.003943) using newer gnomAD database. The WAS variant is present for 4 samples and 1 has genotype 2 (hemizygous male on X chromosome) however it is not identified as pathogenic by ACMG criteria (and nCliVar likely_benign) and and removed by MAF (0.002591) using newer gnomAD database. All other variants are basically do not have sufficient evidence of pathogenicity with updated criteria.
rm(Borghesi_test)
# df_desc <- describe(temp)
# df_desc
# latex(df_desc, file = "./df_desc.tex")
# rm(temp)
# fix missing chromosome info ----
# chr comes from dbnsfp (I believe), but is a sensible header name so we will reuse it
# Remove "chr" prefix from seqname and create a new 'chr' column
df <- df %>%
mutate(chr = sub("chr", "", seqnames))
# comp_het_flag ----
# flag for comp het. WARNING NOT PHASE CHECKED
df <- df %>%
group_by(sample, SYMBOL) %>%
mutate(comp_het_flag = ifelse(n() > 1, 1, NA))
# same flag for genotype == 2 (homozygous)
df <- df %>%
mutate(comp_het_flag = ifelse(is.na(comp_het_flag) & genotype == 2, 1, comp_het_flag)) %>%
ungroup() %>%
dplyr::select(comp_het_flag, everything())
# Update the flag for chromosome X observations to include a check for genotype == 2
# NB:: this must be screened using sex info
df <- df %>%
mutate(comp_het_flag = ifelse(chr == "X" & genotype == 2, 1, comp_het_flag)) %>%
dplyr::select(comp_het_flag, everything())
# print(n = 30, df |> filter(SYMBOL == "WAS") |> dplyr::select(IMPACT, SYMBOL, genotype))
# source acmg filters ----
print("We are adding PS3 now")
source("../ACMG_filters/distribution_variables.R")
source("../ACMG_filters/acmg_filters.R")
