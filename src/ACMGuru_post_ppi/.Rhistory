library(biomaRt)
# List available marts
listMarts()
ensembl = useMart(biomart = "ensembl", mirror = "asia")
??useMart()
# Choose the Ensembl Mart
ensembl = useMart("ensembl")
source("ACMGuru_gene_illustrate_vcurrent.R")
source("ACMGuru_gene_illustrate_vcurrent.R")
capture.output(sessionInfo(), file = "../session_info.txt")
# Protein Structure ----
# https://nvelden.github.io/NGLVieweR/articles/NGLVieweR.html
# install.packages("NGLVieweR")
library(NGLVieweR)
# Load the library
library(biomaRt)
# List available marts
listMarts()
# Choose the Ensembl Mart
ensembl = useMart("ensembl")
?useEnsembl
ensembl <- useEnsembl(biomart = "ensembl", mirror = "asia")
# List available datasets
listDatasets(ensembl)
# Choose the appropriate dataset (for example, 'hsapiens_gene_ensembl' for human)
ensembl = useDataset('hsapiens_gene_ensembl',mart=ensembl)
# merge grouped_df_max and df_report_position on the 'seqid' column to make a new dataframe (assuming 'seqid' column is common to both dataframes).
grouped_df_max_report_position <- merge(grouped_df_max, df_report_position)
# Define your UniProt IDs
Accessions <- grouped_df_max_report_position$seqid
# Get the PDB IDs
pdb_ids <- getBM(
filters = "uniprotswissprot",
attributes = c("uniprotswissprot", "pdb"),
values = Accessions,
mart = ensembl
)
print(pdb_ids)
# get consistent col name for protein ID (uniprot)
# colnames(df)[colnames(df) == 'oldName'] <- 'newName'
colnames(grouped_df_max_report_position)[colnames(grouped_df_max_report_position) == 'seqid'] <- 'uniprotswissprot'
# merge
grouped_df_max_report_position_pdb <- merge(
grouped_df_max_report_position,
pdb_ids,
by = "uniprotswissprot")
# Define the URL and output file
# file from SIFTS
url <- "ftp://ftp.ebi.ac.uk/pub/databases/msd/sifts/flatfiles/tsv/pdb_chain_uniprot.tsv.gz"
output_file <- "pdb_chain_uniprot.tsv"
data_dir <- "../../data/ACMGuru_gene_illustrate_protein_structure/"
output_directory <- "../../images/ACMGuru_gene_illustrate_protein_structure_post_ppi/"
# Read the SIFTS data
sifts_data <- read.csv(paste0(data_dir, output_file), sep = "\t",  header = TRUE, comment.char = "#")
names(sifts_data)
# Filter the SIFTS data to include only the rows that match the IDs in your data
matched_data <- sifts_data %>%
filter(SP_PRIMARY %in% grouped_df_max_report_position_pdb$uniprotswissprot)
# First make sure the SP_BEG and SP_END columns are numeric
matched_data <- matched_data %>%
mutate(across(c(SP_BEG, SP_END), as.numeric))
# Calculate the chain lengths
matched_data <- matched_data %>%
mutate(CHAIN_LENGTH = SP_END - SP_BEG + 1)
# Counting the number of unique PDBs and CHAINs for each SP_PRIMARY and PDB, respectively
matched_data <- matched_data %>%
add_count(SP_PRIMARY, name = "PDB_COUNT") %>%
group_by(PDB) %>%
mutate(CHAIN_COUNT = n_distinct(CHAIN)) %>%
ungroup()
# Identify the top group for each SP_PRIMARY
top_group <- matched_data %>%
group_by(SP_PRIMARY) %>%
arrange(desc(CHAIN_LENGTH), desc(PDB_COUNT), desc(CHAIN_COUNT), .by_group = TRUE) %>%
filter(row_number() == 1) %>%
dplyr::select(SP_PRIMARY, PDB)
# Filtering to keep the rows of the top group for each SP_PRIMARY
longest_chain <- matched_data %>%
semi_join(top_group, by = c("SP_PRIMARY", "PDB"))
colnames(longest_chain)[colnames(longest_chain) == 'SP_PRIMARY'] <- 'uniprotswissprot'
colnames(longest_chain)[colnames(longest_chain) == 'PDB'] <- 'pdb'
# Convert PDB IDs to upper case to match
longest_chain$pdb <- toupper(longest_chain$pdb)
longest_chain$longest_chain <- "Yes"
names(longest_chain)
names(grouped_df_max_report_position_pdb)
# Full outer join of the dataframes
grouped_df_max_report_position_pdb_longest <- merge(grouped_df_max_report_position_pdb, longest_chain, by = c("uniprotswissprot", "pdb"), all = TRUE)
# # Filter the rows where longest_chain == "Yes"
grouped_df_max_report_position_pdb_longest <-
grouped_df_max_report_position_pdb_longest |>
filter(longest_chain == "Yes")
# Group data by PDB and create a list of unique Protein_position values for each group
grouped_df <- grouped_df_max_report_position_pdb_longest %>%
group_by(pdb, SYMBOL, uniprotswissprot) %>%
summarise(Protein_position = list(unique(Protein_position)))
# Define your plot_protein function to iterate over all positions
plot_protein <- function(pdb_id, Protein_positions) {
plot <- NGLVieweR(pdb_id) |> stageParameters(backgroundColor = "white") |>
addRepresentation("cartoon", param = list(colorScheme = "residueindex"))
for(position in Protein_positions){
plot <- plot |>
addRepresentation("ball+stick",
param = list(colorScheme = "element",
colorValue = "red",
sele = as.character(position)
)
) |>
addRepresentation("label",
param = list(sele = paste0("protein and ", as.character(position)),
labelType = "format",
labelFormat = "[%(resname)s]%(resno)s",
labelGrouping = "residue",
color = "white",
fontFamiliy = "sans-serif",
xOffset = 1,
yOffset = 0,
zOffset = 0,
fixedSize = FALSE,
radiusType = 2,
radiusSize = 6,
showBackground = TRUE,
backgroundColor="black"
)
)
}
return(plot)
}
library(htmlwidgets)
library(webshot2) # requires chrome on system
# get PNG with Webshot? ("Yes" or "No") - this is significantly slower
use_webshot <- "Yes"
# Apply the function to data and save HTML
apply(grouped_df,
1, function(row) {
if (row[['pdb']] != "") {
cat("PDB: ", row[['pdb']], "\n")  # print pdb id
cat("Positions: ", unlist(row[['Protein_position']]), "\n")  # print positions
plot <- plot_protein(row[['pdb']], unlist(row[['Protein_position']]))
file_html = paste0(output_directory,
row[['SYMBOL']], "_",
row[['uniprotswissprot']], "_",
row[['pdb']], ".html")
htmlwidgets::saveWidget(plot,
file=file_html,
selfcontained = FALSE)
if (use_webshot == "Yes") {
# Convert the HTML file to a PNG image
file_png = paste0(output_directory,
row[['SYMBOL']], "_",
row[['uniprotswissprot']], "_",
row[['pdb']], ".png")
webshot2::webshot(url = file_html,
file = file_png,
vwidth = 1024,
vheight = 768,
expand = -50)  # Negative value to trim borders
}
}
})
# source("ACMGuru_gene_illustrate_vcurrent.R")
# this is slow, call from Rds
library(dplyr)
library(ggplot2)
# uniprotR ----
# install.packages('UniprotR')
library(UniprotR)
# install.packages("UniprotR")
# if (!require("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
#
# BiocManager::install("UniprotR", force = TRUE)
# The function `PlotEnrichedPathways` is missing from CRAN version so use github version
# if (!require(devtools)) install.packages("devtools")
# library(devtools)
# install_github("Proteomicslab57357/UniprotR")
# # Install the remotes package if you don't have it
# if (!requireNamespace("remotes", quietly = TRUE)) {
# install.packages("remotes")
# }
#
# # Install a specific version of UniprotR
# remotes::install_version("UniprotR", version = "2.4.0")
output_dir <- "../../data/ACMGuru_post_ppi/"
images_dir <- "../../images/ACMGuru_post_ppi_uniprotr/"
geneset_MCL_ID <- c(22, 586, 836)
print("Note here we import grouped_df_max_pathway_id")
grouped_df_max <- readRDS(paste0("../../data/ACMGuru_post_ppi/acmguru_gene_illustrate_grouped_df_max", paste(geneset_MCL_ID, collapse="_"), ".Rds"))
df_report <- readRDS(paste0("../../data/ACMGuru_post_ppi/acmguru_gene_illustrate_df_report", paste(geneset_MCL_ID, collapse="_"), ".Rds"))
df_report |> dplyr::select(SYMBOL) |> unique()
df_report |> dplyr::select(seqid) |> unique()
grouped_df_max|> dplyr::select(seqid) |> unique()
rm(list=setdiff(ls(), c("output_dir", "images_dir", "grouped_df_max", "df_report", "geneset_MCL_ID")))
# add pathway_id to grouped_df_max
grouped_df_max$seqid |> unique()
grouped_df_max$SYMBOL |> unique()
Accessions_full <- df_report |> dplyr::select(SYMBOL, seqid, pathway_id) |> unique()
# Accessions <- df_report |> dplyr::select(seqid) |> unique() |> as.vector()
Accessions <- grouped_df_max$seqid
# tmp <- df_report |> select(SYMBOL, pathway_id, seqid) |> unique()
# tmp2 <- merge(grouped_df_max, tmp, all.x = T)
# grouped_df_max <- tmp2
# Specify file path
# output_dir = "../../data/ACMGuru_post_ppi/"
#Read Accessions from csv file , Note : Accessions must be in the first column.
# Accessions <-GetAccessionList("Accessions.csv")
# head(Accessions)
# Accessions <- grouped_df_max |> select(seqid, pathway_id)
# Download ----
#Get Taxonomy Information
TaxaObj <- GetNamesTaxa(Accessions)
# source("ACMGuru_gene_illustrate_vcurrent.R")
# this is slow, call from Rds
library(dplyr)
library(ggplot2)
# uniprotR ----
# install.packages('UniprotR')
library(UniprotR)
# install.packages("UniprotR")
# if (!require("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
#
# BiocManager::install("UniprotR", force = TRUE)
# The function `PlotEnrichedPathways` is missing from CRAN version so use github version
# if (!require(devtools)) install.packages("devtools")
# library(devtools)
# install_github("Proteomicslab57357/UniprotR")
# # Install the remotes package if you don't have it
# if (!requireNamespace("remotes", quietly = TRUE)) {
# install.packages("remotes")
# }
#
# # Install a specific version of UniprotR
# remotes::install_version("UniprotR", version = "2.4.0")
output_dir <- "../../data/ACMGuru_post_ppi/"
images_dir <- "../../images/ACMGuru_post_ppi_uniprotr/"
geneset_MCL_ID <- c(22, 586, 836)
print("Note here we import grouped_df_max_pathway_id")
grouped_df_max <- readRDS(paste0("../../data/ACMGuru_post_ppi/acmguru_gene_illustrate_grouped_df_max", paste(geneset_MCL_ID, collapse="_"), ".Rds"))
df_report <- readRDS(paste0("../../data/ACMGuru_post_ppi/acmguru_gene_illustrate_df_report", paste(geneset_MCL_ID, collapse="_"), ".Rds"))
df_report |> dplyr::select(SYMBOL) |> unique()
df_report |> dplyr::select(seqid) |> unique()
grouped_df_max|> dplyr::select(seqid) |> unique()
rm(list=setdiff(ls(), c("output_dir", "images_dir", "grouped_df_max", "df_report", "geneset_MCL_ID")))
# add pathway_id to grouped_df_max
grouped_df_max$seqid |> unique()
grouped_df_max$SYMBOL |> unique()
Accessions_full <- df_report |> dplyr::select(SYMBOL, seqid, pathway_id) |> unique()
# Accessions <- df_report |> dplyr::select(seqid) |> unique() |> as.vector()
Accessions <- grouped_df_max$seqid
# tmp <- df_report |> select(SYMBOL, pathway_id, seqid) |> unique()
# tmp2 <- merge(grouped_df_max, tmp, all.x = T)
# grouped_df_max <- tmp2
# Specify file path
# output_dir = "../../data/ACMGuru_post_ppi/"
#Read Accessions from csv file , Note : Accessions must be in the first column.
# Accessions <-GetAccessionList("Accessions.csv")
# head(Accessions)
# Accessions <- grouped_df_max |> select(seqid, pathway_id)
# Download ----
#Get Taxonomy Information
print("TaxaObj <- GetNamesTaxa(Accessions)")
# TaxaObj <- GetNamesTaxa(Accessions)
# Get Gene ontolgy Information
print("GeneOntologyObj <- GetProteinGOInfo(Accessions)")
GeneOntologyObj <- GetProteinGOInfo(Accessions)
# source("ACMGuru_gene_illustrate_vcurrent.R")
# this is slow, call from Rds
library(dplyr)
library(ggplot2)
# uniprotR ----
# install.packages('UniprotR')
library(UniprotR)
# install.packages("UniprotR")
# if (!require("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
#
# BiocManager::install("UniprotR", force = TRUE)
# The function `PlotEnrichedPathways` is missing from CRAN version so use github version
# if (!require(devtools)) install.packages("devtools")
# library(devtools)
# install_github("Proteomicslab57357/UniprotR")
# # Install the remotes package if you don't have it
# if (!requireNamespace("remotes", quietly = TRUE)) {
# install.packages("remotes")
# }
#
# # Install a specific version of UniprotR
# remotes::install_version("UniprotR", version = "2.4.0")
output_dir <- "../../data/ACMGuru_post_ppi/"
images_dir <- "../../images/ACMGuru_post_ppi_uniprotr/"
geneset_MCL_ID <- c(22, 586, 836)
print("Note here we import grouped_df_max_pathway_id")
grouped_df_max <- readRDS(paste0("../../data/ACMGuru_post_ppi/acmguru_gene_illustrate_grouped_df_max", paste(geneset_MCL_ID, collapse="_"), ".Rds"))
df_report <- readRDS(paste0("../../data/ACMGuru_post_ppi/acmguru_gene_illustrate_df_report", paste(geneset_MCL_ID, collapse="_"), ".Rds"))
df_report |> dplyr::select(SYMBOL) |> unique()
df_report |> dplyr::select(seqid) |> unique()
grouped_df_max|> dplyr::select(seqid) |> unique()
rm(list=setdiff(ls(), c("output_dir", "images_dir", "grouped_df_max", "df_report", "geneset_MCL_ID")))
# add pathway_id to grouped_df_max
grouped_df_max$seqid |> unique()
grouped_df_max$SYMBOL |> unique()
Accessions_full <- df_report |> dplyr::select(SYMBOL, seqid, pathway_id) |> unique()
# Accessions <- df_report |> dplyr::select(seqid) |> unique() |> as.vector()
Accessions <- grouped_df_max$seqid
# tmp <- df_report |> select(SYMBOL, pathway_id, seqid) |> unique()
# tmp2 <- merge(grouped_df_max, tmp, all.x = T)
# grouped_df_max <- tmp2
# Specify file path
# output_dir = "../../data/ACMGuru_post_ppi/"
#Read Accessions from csv file , Note : Accessions must be in the first column.
# Accessions <-GetAccessionList("Accessions.csv")
# head(Accessions)
# Accessions <- grouped_df_max |> select(seqid, pathway_id)
# Download ----
#Get Taxonomy Information
print("TaxaObj <- GetNamesTaxa(Accessions)")
# TaxaObj <- GetNamesTaxa(Accessions)
# Get Gene ontolgy Information
print("GeneOntologyObj <- GetProteinGOInfo(Accessions)")
# GeneOntologyObj <- GetProteinGOInfo(Accessions)
# GetProteinFunction
print("ProteinFunction <- GetProteinFunction(Accessions)")
# ProteinFunction <- GetProteinFunction(Accessions)
# save ----
# saveRDS(TaxaObj, file=paste(output_dir, "ontology_taxa/TaxaObj.Rds", sep = ""))
# saveRDS(GeneOntologyObj, file=paste(output_dir, "ontology_taxa/GeneOntologyObj.Rds", sep = ""))
# saveRDS(ProteinFunction, file=paste(output_dir, "ontology_taxa/ProteinFunction.Rds", sep = ""))
# read local copy ----
TaxaObj <- readRDS(file=paste(output_dir, "ontology_taxa/TaxaObj.Rds", sep = ""))
GeneOntologyObj <- readRDS(file=paste(output_dir, "ontology_taxa/GeneOntologyObj.Rds", sep = ""))
ProteinFunction <- readRDS(file=paste(output_dir, "ontology_taxa/ProteinFunction.Rds", sep = ""))
TaxaObj$seqid <- rownames(TaxaObj)
GeneOntologyObj$seqid <- rownames(GeneOntologyObj)
ProteinFunction$seqid <- rownames(ProteinFunction)
# add pathway id ----
tmp <- df_report |> select(SYMBOL, pathway_id, seqid) |> unique()
# source("ACMGuru_gene_illustrate_vcurrent.R")
# this is slow, call from Rds
library(dplyr)
library(ggplot2)
# uniprotR ----
# install.packages('UniprotR')
library(UniprotR)
# install.packages("UniprotR")
# if (!require("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
#
# BiocManager::install("UniprotR", force = TRUE)
# The function `PlotEnrichedPathways` is missing from CRAN version so use github version
# if (!require(devtools)) install.packages("devtools")
# library(devtools)
# install_github("Proteomicslab57357/UniprotR")
# # Install the remotes package if you don't have it
# if (!requireNamespace("remotes", quietly = TRUE)) {
# install.packages("remotes")
# }
#
# # Install a specific version of UniprotR
# remotes::install_version("UniprotR", version = "2.4.0")
output_dir <- "../../data/ACMGuru_post_ppi/"
images_dir <- "../../images/ACMGuru_post_ppi_uniprotr/"
geneset_MCL_ID <- c(22, 586, 836)
print("Note here we import grouped_df_max_pathway_id")
grouped_df_max <- readRDS(paste0("../../data/ACMGuru_post_ppi/acmguru_gene_illustrate_grouped_df_max", paste(geneset_MCL_ID, collapse="_"), ".Rds"))
df_report <- readRDS(paste0("../../data/ACMGuru_post_ppi/acmguru_gene_illustrate_df_report", paste(geneset_MCL_ID, collapse="_"), ".Rds"))
df_report |> dplyr::select(SYMBOL) |> unique()
df_report |> dplyr::select(seqid) |> unique()
grouped_df_max|> dplyr::select(seqid) |> unique()
rm(list=setdiff(ls(), c("output_dir", "images_dir", "grouped_df_max", "df_report", "geneset_MCL_ID")))
# add pathway_id to grouped_df_max
grouped_df_max$seqid |> unique()
grouped_df_max$SYMBOL |> unique()
Accessions_full <- df_report |> dplyr::select(SYMBOL, seqid, pathway_id) |> unique()
# Accessions <- df_report |> dplyr::select(seqid) |> unique() |> as.vector()
Accessions <- grouped_df_max$seqid
# tmp <- df_report |> select(SYMBOL, pathway_id, seqid) |> unique()
# tmp2 <- merge(grouped_df_max, tmp, all.x = T)
# grouped_df_max <- tmp2
# Specify file path
# output_dir = "../../data/ACMGuru_post_ppi/"
#Read Accessions from csv file , Note : Accessions must be in the first column.
# Accessions <-GetAccessionList("Accessions.csv")
# head(Accessions)
# Accessions <- grouped_df_max |> select(seqid, pathway_id)
# Download ----
#Get Taxonomy Information
print("TaxaObj <- GetNamesTaxa(Accessions)")
# TaxaObj <- GetNamesTaxa(Accessions)
# Get Gene ontolgy Information
print("GeneOntologyObj <- GetProteinGOInfo(Accessions)")
# GeneOntologyObj <- GetProteinGOInfo(Accessions)
# GetProteinFunction
print("ProteinFunction <- GetProteinFunction(Accessions)")
# ProteinFunction <- GetProteinFunction(Accessions)
# save ----
# saveRDS(TaxaObj, file=paste(output_dir, "ontology_taxa/TaxaObj.Rds", sep = ""))
# saveRDS(GeneOntologyObj, file=paste(output_dir, "ontology_taxa/GeneOntologyObj.Rds", sep = ""))
# saveRDS(ProteinFunction, file=paste(output_dir, "ontology_taxa/ProteinFunction.Rds", sep = ""))
# read local copy ----
TaxaObj <- readRDS(file=paste(output_dir, "ontology_taxa/TaxaObj.Rds", sep = ""))
GeneOntologyObj <- readRDS(file=paste(output_dir, "ontology_taxa/GeneOntologyObj.Rds", sep = ""))
ProteinFunction <- readRDS(file=paste(output_dir, "ontology_taxa/ProteinFunction.Rds", sep = ""))
TaxaObj$seqid <- rownames(TaxaObj)
GeneOntologyObj$seqid <- rownames(GeneOntologyObj)
ProteinFunction$seqid <- rownames(ProteinFunction)
# add pathway id ----
tmp <- df_report |> select(SYMBOL, pathway_id, seqid) |> unique()
library(dplyr)
library(ggplot2)
# uniprotR ----
# install.packages('UniprotR')
library(UniprotR)
output_dir <- "../../data/ACMGuru_post_ppi/"
images_dir <- "../../images/ACMGuru_post_ppi_uniprotr/"
geneset_MCL_ID <- c(22, 586, 836)
print("Note here we import grouped_df_max_pathway_id")
grouped_df_max <- readRDS(paste0("../../data/ACMGuru_post_ppi/acmguru_gene_illustrate_grouped_df_max", paste(geneset_MCL_ID, collapse="_"), ".Rds"))
df_report <- readRDS(paste0("../../data/ACMGuru_post_ppi/acmguru_gene_illustrate_df_report", paste(geneset_MCL_ID, collapse="_"), ".Rds"))
df_report |> dplyr::select(SYMBOL) |> unique()
df_report |> dplyr::select(seqid) |> unique()
grouped_df_max|> dplyr::select(seqid) |> unique()
rm(list=setdiff(ls(), c("output_dir", "images_dir", "grouped_df_max", "df_report", "geneset_MCL_ID")))
# add pathway_id to grouped_df_max
grouped_df_max$seqid |> unique()
grouped_df_max$SYMBOL |> unique()
Accessions_full <- df_report |> dplyr::select(SYMBOL, seqid, pathway_id) |> unique()
# Accessions <- df_report |> dplyr::select(seqid) |> unique() |> as.vector()
Accessions <- grouped_df_max$seqid
# Download ----
#Get Taxonomy Information
print("TaxaObj <- GetNamesTaxa(Accessions)")
# Get Gene ontolgy Information
print("GeneOntologyObj <- GetProteinGOInfo(Accessions)")
# GetProteinFunction
print("ProteinFunction <- GetProteinFunction(Accessions)")
# read local copy ----
TaxaObj <- readRDS(file=paste(output_dir, "ontology_taxa/TaxaObj.Rds", sep = ""))
GeneOntologyObj <- readRDS(file=paste(output_dir, "ontology_taxa/GeneOntologyObj.Rds", sep = ""))
ProteinFunction <- readRDS(file=paste(output_dir, "ontology_taxa/ProteinFunction.Rds", sep = ""))
TaxaObj$seqid <- rownames(TaxaObj)
GeneOntologyObj$seqid <- rownames(GeneOntologyObj)
ProteinFunction$seqid <- rownames(ProteinFunction)
tmp <- df_report |> select(SYMBOL, pathway_id, seqid) |> unique()
df_report
df_report |> select(SYMBOL, pathway_id, seqid)
tmp <- df_report |> dplyr::select(SYMBOL, pathway_id, seqid) |> unique()
TaxaObj <- merge(TaxaObj, tmp, all.x = T)
GeneOntologyObj <- merge(GeneOntologyObj, tmp, all.x = T)
ProteinFunction <- merge(ProteinFunction, tmp, all.x = T)
rm(tmp)
TaxaObj <- TaxaObj |> filter(!is.na(pathway_id))
GeneOntologyObj <- GeneOntologyObj |> filter(!is.na(pathway_id))
ProteinFunction <- ProteinFunction |> filter(!is.na(pathway_id))
geneset_MCL_ID_str <- paste(geneset_MCL_ID, collapse = "_")
#Visualize Chromosomes localization
p_chr <- PlotChromosomeInfo( TaxaObj )
p_chr
ggsave(paste(images_dir, "uniprotr_p_chr_merged_", geneset_MCL_ID_str, ".pdf", sep = "") , plot = p_chr, width = 12, height = 8 )
#Combine Gene ontology plots into one plot
p_goi <- PlotGoInfo(GeneOntologyObj)
p_goi
p_goi
ggsave(paste(images_dir, "uniprotr_p_goi_merged_", geneset_MCL_ID_str, ".pdf", sep = "") , plot = p_goi, width = 12, height = 10 )
# Enrichment analysis using KEGG, Reactome of protein list
Accessions_match <- Accessions_full |> dplyr::select(seqid) |> unique() |> as.list()
p_kr <- Pathway.Enr(Accessions_match)
p_kr
ggsave(paste(images_dir, "uniprotr_p_kr_merged_", geneset_MCL_ID_str, ".pdf", sep = "") , plot = p_kr, width = 10, height = 6 )
# loop on pathways ----
for (pathway in geneset_MCL_ID) {
print(paste("Running:", pathway))
#Visualize Chromosomes localization
print(paste("chr..."))
p_chr <- PlotChromosomeInfo( (TaxaObj |> filter(pathway_id == pathway)))
# p_chr
ggsave(paste(images_dir, "uniprotr_p_chr_pathway_ID_", pathway, ".pdf", sep = "") , plot = p_chr, width = 15, height = 8 )
#Combine Gene ontology plots into one plot
print(paste("goi..."))
p_goi <- PlotGoInfo( (GeneOntologyObj |> filter(pathway_id == pathway)))
# p_goi
ggsave(paste(images_dir, "uniprotr_p_goi_pathway_ID_", pathway, ".pdf", sep = "") , plot = p_goi, width = 18, height = 8 )
# Enrichment analysis using KEGG, Reactome of protein list
print(paste("filt..."))
Accessions_match <- Accessions_full |> filter(pathway_id == pathway) |> dplyr::select(seqid) |> unique() |> as.list()
print(paste("kr..."))
p_kr <- Pathway.Enr(Accessions_match)
# p_kr
ggsave(paste(images_dir, "uniprotr_p_kr_pathway_ID_", pathway, ".pdf", sep = "") , plot = p_kr, width = 8, height = 6 )
}
# get discussion ----
names(TaxaObj)
names(GeneOntologyObj)
# seqid used to merege which were added earlier
grouped_df_max_GO <- merge(grouped_df_max, GeneOntologyObj)
grouped_df_max_GO_taxa <- merge(grouped_df_max_GO, TaxaObj)
grouped_df_max_GO_taxa_funct <- merge(grouped_df_max_GO_taxa, ProteinFunction)
df_report_grouped_grouped_df_max_GO_taxa_funct <- merge(df_report, grouped_df_max_GO_taxa_funct)
df_report_discussion <-
df_report_grouped_grouped_df_max_GO_taxa_funct |>
dplyr::select(pathway_id, SYMBOL,
Protein.names,
"Gene.Ontology..molecular.function.",
"Function..CC."
) |>
unique()
df_report_discussion <-
df_report_discussion |> arrange(pathway_id, SYMBOL)
readr::write_tsv(df_report_discussion, file=(paste0("../../data/ACMGuru_post_ppi/df_report_discussion_", paste(geneset_MCL_ID, collapse="_"), ".tsv"))
)
write.csv(df_report_discussion, file=(paste0("../../data/ACMGuru_post_ppi/df_report_discussion_", paste(geneset_MCL_ID, collapse="_"), ".csv")),
row.names = FALSE)
